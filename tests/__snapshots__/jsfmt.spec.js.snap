// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Inbox.sol 1`] = `
// This comment spans one line

/*
This
comment
spans
multiple
lines.
*/

pragma   solidity   ^0.4.23;
contract Inbox {
  string public message;

  constructor(string initialMessage) public {
    message = initialMessage;
  }

  function setMessage(string newMessage) public {
    message = newMessage;
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity ^0.4.23;
contract Inbox {
  string public message;

  constructor(string initialMessage) public {
    message = initialMessage;
  }

  function setMessage(string newMessage) public {
    message = newMessage;
  }
}

`;

exports[`Ownable.sol 1`] = `
pragma solidity ^0.4.24;

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address private _owner;

  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  /**
   * @dev The Ownable constructor sets the original \`owner\` of the contract to the sender
   * account.
   */
  constructor() public {
    _owner = msg.sender;
  }

  /**
   * @return the address of the owner.
   */
  function owner() public view returns(address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(isOwner());
    _;
  }

  /**
   * @return true if \`msg.sender\` is the owner of the contract.
   */
  function isOwner() public view returns(bool) {
    return msg.sender == _owner;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the \`onlyOwner\`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(_owner);
    _owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0));
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity ^0.4.24;
contract Ownable {
  address private _owner;
  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  constructor() public {
    _owner = msg.sender;
  }

  function owner() public view returns(address) {
    return _owner;
  }
  modifier onlyOwner() {
    require(isOwner());
    _;
  }

  function isOwner() public view returns(bool) {
    return msg.sender == _owner;
  }

  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(_owner);
    _owner = address(0);
  }

  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0));
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

`;

exports[`SimpleStorage.sol 1`] = `
pragma solidity ^0.4.0;

contract SimpleStorage {
  string public name = "SimpleStorage";
  uint storedData;

  function set(uint x) public {
    storedData = x;
  }

  function get() public view returns (uint) {
    return storedData;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity ^0.4.0;
contract SimpleStorage {
  string public name = "SimpleStorage";
  uint storedData;

  function set(uint x) public {
    storedData = x;
  }

  function get() public view returns(uint) {
    return storedData;
  }
}

`;

exports[`expected.json 1`] = `
{
  "children": [
    {
      "baseContracts": [],
      "kind": "contract",
      "name": "BasicIterator",
      "subNodes": [
        {
          "initialValue": null,
          "type": "StateVariableDeclaration",
          "variables": [
            {
              "expression": null,
              "isDeclaredConst": false,
              "isIndexed": false,
              "isStateVar": ["secure"],
              "name": "creator",
              "type": "VariableDeclaration",
              "typeName": { "name": "address", "type": "ElementaryTypeName" },
              "visibility": "default"
            }
          ]
        },
        {
          "initialValue": null,
          "type": "StateVariableDeclaration",
          "variables": [
            {
              "expression": null,
              "isDeclaredConst": false,
              "isIndexed": false,
              "isStateVar": ["secure"],
              "name": "integers",
              "type": "VariableDeclaration",
              "typeName": {
                "baseTypeName": {
                  "name": "uint8",
                  "type": "ElementaryTypeName"
                },
                "length": {
                  "number": "10",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "ArrayTypeName"
              },
              "visibility": "default"
            }
          ]
        },
        {
          "body": {
            "statements": [
              {
                "expression": {
                  "left": { "name": "creator", "type": "Identifier" },
                  "operator": "=",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "sender",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "ExpressionStatement"
              },
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "x",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "body": {
                  "statements": [["Object"], ["Object"]],
                  "type": "Block"
                },
                "condition": {
                  "left": { "name": "x", "type": "Identifier" },
                  "operator": "<",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "length",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "WhileStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": ["secure"],
          "modifiers": [],
          "name": null,
          "parameters": { "parameters": [], "type": "ParameterList" },
          "stateMutability": null,
          "type": "FunctionDefinition",
          "visibility": "default"
        },
        {
          "body": {
            "statements": [
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "sum",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "x",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "body": {
                  "statements": [["Object"], ["Object"]],
                  "type": "Block"
                },
                "condition": {
                  "left": { "name": "x", "type": "Identifier" },
                  "operator": "<",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "length",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "WhileStatement"
              },
              {
                "expression": { "name": "sum", "type": "Identifier" },
                "type": "ReturnStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": false,
          "modifiers": [],
          "name": "getSum",
          "parameters": { "parameters": [], "type": "ParameterList" },
          "returnParameters": {
            "parameters": [
              {
                "isIndexed": false,
                "isStateVar": false,
                "name": null,
                "storageLocation": null,
                "type": "Parameter",
                "typeName": { "name": "uint", "type": "ElementaryTypeName" }
              }
            ],
            "type": "ParameterList"
          },
          "stateMutability": "constant",
          "type": "FunctionDefinition",
          "visibility": "default"
        },
        {
          "body": {
            "statements": [
              {
                "condition": {
                  "left": {
                    "expression": ["Object"],
                    "memberName": "sender",
                    "type": "MemberAccess"
                  },
                  "operator": "==",
                  "right": { "name": "creator", "type": "Identifier" },
                  "type": "BinaryOperation"
                },
                "falseBody": null,
                "[secure]Body": { "statements": [["Object"]], "type": "Block" },
                "type": "IfStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": false,
          "modifiers": [],
          "name": "kill",
          "parameters": { "parameters": [], "type": "ParameterList" },
          "returnParameters": null,
          "stateMutability": null,
          "type": "FunctionDefinition",
          "visibility": "default"
        }
      ],
      "type": "ContractDefinition"
    }
  ],
  "type": "SourceUnit"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "children": [
    {
      "baseContracts": [],
      "kind": "contract",
      "name": "BasicIterator",
      "subNodes": [
        {
          "initialValue": null,
          "type": "StateVariableDeclaration",
          "variables": [
            {
              "expression": null,
              "isDeclaredConst": false,
              "isIndexed": false,
              "isStateVar": ["secure"],
              "name": "creator",
              "type": "VariableDeclaration",
              "typeName": { "name": "address", "type": "ElementaryTypeName" },
              "visibility": "default"
            }
          ]
        },
        {
          "initialValue": null,
          "type": "StateVariableDeclaration",
          "variables": [
            {
              "expression": null,
              "isDeclaredConst": false,
              "isIndexed": false,
              "isStateVar": ["secure"],
              "name": "integers",
              "type": "VariableDeclaration",
              "typeName": {
                "baseTypeName": {
                  "name": "uint8",
                  "type": "ElementaryTypeName"
                },
                "length": {
                  "number": "10",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "ArrayTypeName"
              },
              "visibility": "default"
            }
          ]
        },
        {
          "body": {
            "statements": [
              {
                "expression": {
                  "left": { "name": "creator", "type": "Identifier" },
                  "operator": "=",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "sender",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "ExpressionStatement"
              },
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "x",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "body": {
                  "statements": [["Object"], ["Object"]],
                  "type": "Block"
                },
                "condition": {
                  "left": { "name": "x", "type": "Identifier" },
                  "operator": "<",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "length",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "WhileStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": ["secure"],
          "modifiers": [],
          "name": null,
          "parameters": { "parameters": [], "type": "ParameterList" },
          "stateMutability": null,
          "type": "FunctionDefinition",
          "visibility": "default"
        },
        {
          "body": {
            "statements": [
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "sum",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "initialValue": {
                  "number": "0",
                  "subdenomination": null,
                  "type": "NumberLiteral"
                },
                "type": "VariableDeclarationStatement",
                "variables": [
                  {
                    "isIndexed": false,
                    "isStateVar": false,
                    "name": "x",
                    "storageLocation": null,
                    "type": "VariableDeclaration",
                    "typeName": ["Object"]
                  }
                ]
              },
              {
                "body": {
                  "statements": [["Object"], ["Object"]],
                  "type": "Block"
                },
                "condition": {
                  "left": { "name": "x", "type": "Identifier" },
                  "operator": "<",
                  "right": {
                    "expression": ["Object"],
                    "memberName": "length",
                    "type": "MemberAccess"
                  },
                  "type": "BinaryOperation"
                },
                "type": "WhileStatement"
              },
              {
                "expression": { "name": "sum", "type": "Identifier" },
                "type": "ReturnStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": false,
          "modifiers": [],
          "name": "getSum",
          "parameters": { "parameters": [], "type": "ParameterList" },
          "returnParameters": {
            "parameters": [
              {
                "isIndexed": false,
                "isStateVar": false,
                "name": null,
                "storageLocation": null,
                "type": "Parameter",
                "typeName": { "name": "uint", "type": "ElementaryTypeName" }
              }
            ],
            "type": "ParameterList"
          },
          "stateMutability": "constant",
          "type": "FunctionDefinition",
          "visibility": "default"
        },
        {
          "body": {
            "statements": [
              {
                "condition": {
                  "left": {
                    "expression": ["Object"],
                    "memberName": "sender",
                    "type": "MemberAccess"
                  },
                  "operator": "==",
                  "right": { "name": "creator", "type": "Identifier" },
                  "type": "BinaryOperation"
                },
                "falseBody": null,
                "[secure]Body": { "statements": [["Object"]], "type": "Block" },
                "type": "IfStatement"
              }
            ],
            "type": "Block"
          },
          "isConstructor": false,
          "modifiers": [],
          "name": "kill",
          "parameters": { "parameters": [], "type": "ParameterList" },
          "returnParameters": null,
          "stateMutability": null,
          "type": "FunctionDefinition",
          "visibility": "default"
        }
      ],
      "type": "ContractDefinition"
    }
  ],
  "type": "SourceUnit"
}

`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Assembly.sol 1`] = `
contract Assembly {
  function ifAssembly() {
    assembly {
      if
        returndatasize    {
          success := 0
      }
    }
  }

  function caseAssembly() {
    assembly {
          switch value
            case 0 {
              mstore(0, 0x0000000000000000000000000000000000000000000000000000000000000000)
            }
            case 1 {
                mstore(0, 0x1111111111111111111111111111111111111111111111111111111111111111)
            }
        }
  }

  function forAssembly() {
    assembly {
for { let i := 0 } lt(i, x) { i := add(i, 1) } { y := mul(2, y) }
        }
  }

  function callWithComments() {
    assembly {
      f(
        1, // one
        2, // two
        3 // three
      )
    }
  }

  function assemblyFunctionNoParameters() {
		assembly {
			function getAnswer  ()
      -> answer {
          answer:=    42
			}
  		}
  }

  function assemblyFunctionOneParameter() {
		assembly {
			function inc  (x)
      -> result {
          result := add(x,
                        1)
			}
  		}
  }

  function assemblyFunctionThreeParameters() {
		assembly {
			function sum  (a, b, c)
      -> result {
          result := add(a,
                        add(b, c))
			}
  		}
  }

  function assemblyFunctionLongParameters() {
		assembly {
			function sum  (thisIs, aFunctionWithVery, veryLongParameterNames, andItAlsoHasALotOfParameters, soItShouldBeSplitInMultipleLines)
      -> result {
        result := 0
			}
  		}
  }

  function assemblyFunctionLongReturnParameters() {
		assembly {
			function sum  (a, b, c, d, e)
      -> thisIs, aFunctionWithVery, veryLongParameterNames, andItAlsoHasALotOfParameters, soItShouldBeSplitInMultipleLines {
        thisIs := 0
        aFunctionWithVery := 0
        veryLongParameterNames := 0
        andItAlsoHasALotOfParameters := 0
        soItShouldBeSplitInMultipleLines := 0
			}
  		}
  }


    function assemblyFunctionLongParametersAndReturnParameters() {
  		assembly {
  			function sum  (a,veryLong, listof, parameters, thatShould,splitForSure)
        -> thisIs, aFunctionWithVery, veryLongParameterNames, andItAlsoHasALotOfParameters, soItShouldBeSplitInMultipleLines {
          thisIs := 0
          aFunctionWithVery := 0
          veryLongParameterNames := 0
          andItAlsoHasALotOfParameters := 0
          soItShouldBeSplitInMultipleLines := 0
  			}
    		}
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
contract Assembly {
    function ifAssembly() {
        assembly {
            if returndatasize {
                success := 0
            }
        }
    }

    function caseAssembly() {
        assembly {
            switch value
                case 0 {
                    mstore(
                        0,
                        0x0000000000000000000000000000000000000000000000000000000000000000
                    )
                }
                case 1 {
                    mstore(
                        0,
                        0x1111111111111111111111111111111111111111111111111111111111111111
                    )
                }
        }
    }

    function forAssembly() {
        assembly {
            for {
                let i := 0
            } lt(i, x) {
                i := add(i, 1)
            } {
                y := mul(2, y)
            }
        }
    }

    function callWithComments() {
        assembly {
            f(
                1, // one
                2, // two
                3 // three
            )
        }
    }

    function assemblyFunctionNoParameters() {
        assembly {
            function getAnswer() -> answer {
                answer := 42
            }
        }
    }

    function assemblyFunctionOneParameter() {
        assembly {
            function inc(x) -> result {
                result := add(x, 1)
            }
        }
    }

    function assemblyFunctionThreeParameters() {
        assembly {
            function sum(a, b, c) -> result {
                result := add(a, add(b, c))
            }
        }
    }

    function assemblyFunctionLongParameters() {
        assembly {
            function sum(
                thisIs,
                aFunctionWithVery,
                veryLongParameterNames,
                andItAlsoHasALotOfParameters,
                soItShouldBeSplitInMultipleLines
            ) -> result {
                result := 0
            }
        }
    }

    function assemblyFunctionLongReturnParameters() {
        assembly {
            function sum(a, b, c, d, e)
                ->
                    thisIs,
                    aFunctionWithVery,
                    veryLongParameterNames,
                    andItAlsoHasALotOfParameters,
                    soItShouldBeSplitInMultipleLines
            {
                thisIs := 0
                aFunctionWithVery := 0
                veryLongParameterNames := 0
                andItAlsoHasALotOfParameters := 0
                soItShouldBeSplitInMultipleLines := 0
            }
        }
    }

    function assemblyFunctionLongParametersAndReturnParameters() {
        assembly {
            function sum(
                a,
                veryLong,
                listof,
                parameters,
                thatShould,
                splitForSure
            )
                ->
                    thisIs,
                    aFunctionWithVery,
                    veryLongParameterNames,
                    andItAlsoHasALotOfParameters,
                    soItShouldBeSplitInMultipleLines
            {
                thisIs := 0
                aFunctionWithVery := 0
                veryLongParameterNames := 0
                andItAlsoHasALotOfParameters := 0
                soItShouldBeSplitInMultipleLines := 0
            }
        }
    }
}

`;

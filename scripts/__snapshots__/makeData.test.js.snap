// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`makeData to match snapshot for binary-operator-printers 1`] = `
"/* This file was automatically generated on 1479427200 */

  /* eslint-disable global-require */

  module.exports = {arithmetic:require('./arithmetic'),assignment:require('./assignment'),bit:require('./bit'),comparison:require('./comparison'),exponentiation:require('./exponentiation'),logical:require('./logical'),shift:require('./shift')};"
`;

exports[`makeData to match snapshot for nodes 1`] = `
"/* This file was automatically generated on 1479427200 */

  /* eslint-disable global-require */

  module.exports = {ArrayTypeName:require('./ArrayTypeName'),AssemblyAssignment:require('./AssemblyAssignment'),AssemblyBlock:require('./AssemblyBlock'),AssemblyCall:require('./AssemblyCall'),AssemblyCase:require('./AssemblyCase'),AssemblyFor:require('./AssemblyFor'),AssemblyFunctionDefinition:require('./AssemblyFunctionDefinition'),AssemblyIf:require('./AssemblyIf'),AssemblyLocalDefinition:require('./AssemblyLocalDefinition'),AssemblyMemberAccess:require('./AssemblyMemberAccess'),AssemblySwitch:require('./AssemblySwitch'),BinaryOperation:require('./BinaryOperation'),Block:require('./Block'),BooleanLiteral:require('./BooleanLiteral'),Break:require('./Break'),BreakStatement:require('./BreakStatement'),CatchClause:require('./CatchClause'),Conditional:require('./Conditional'),ContinueStatement:require('./ContinueStatement'),ContractDefinition:require('./ContractDefinition'),DecimalNumber:require('./DecimalNumber'),DoWhileStatement:require('./DoWhileStatement'),ElementaryTypeName:require('./ElementaryTypeName'),EmitStatement:require('./EmitStatement'),EnumDefinition:require('./EnumDefinition'),EnumValue:require('./EnumValue'),EventDefinition:require('./EventDefinition'),ExpressionStatement:require('./ExpressionStatement'),FileLevelConstant:require('./FileLevelConstant'),ForStatement:require('./ForStatement'),FunctionCall:require('./FunctionCall'),FunctionDefinition:require('./FunctionDefinition'),FunctionTypeName:require('./FunctionTypeName'),HexLiteral:require('./HexLiteral'),HexNumber:require('./HexNumber'),Identifier:require('./Identifier'),IfStatement:require('./IfStatement'),ImportDirective:require('./ImportDirective'),IndexAccess:require('./IndexAccess'),IndexRangeAccess:require('./IndexRangeAccess'),InheritanceSpecifier:require('./InheritanceSpecifier'),InlineAssemblyStatement:require('./InlineAssemblyStatement'),LabelDefinition:require('./LabelDefinition'),Mapping:require('./Mapping'),MemberAccess:require('./MemberAccess'),ModifierDefinition:require('./ModifierDefinition'),ModifierInvocation:require('./ModifierInvocation'),NameValueExpression:require('./NameValueExpression'),NameValueList:require('./NameValueList'),NewExpression:require('./NewExpression'),NumberLiteral:require('./NumberLiteral'),PragmaDirective:require('./PragmaDirective'),ReturnStatement:require('./ReturnStatement'),SourceUnit:require('./SourceUnit'),StateVariableDeclaration:require('./StateVariableDeclaration'),StringLiteral:require('./StringLiteral'),StructDefinition:require('./StructDefinition'),ThrowStatement:require('./ThrowStatement'),TryStatement:require('./TryStatement'),TupleExpression:require('./TupleExpression'),TypeNameExpression:require('./TypeNameExpression'),UnaryOperation:require('./UnaryOperation'),UncheckedStatement:require('./UncheckedStatement'),UserDefinedTypeName:require('./UserDefinedTypeName'),UsingForDeclaration:require('./UsingForDeclaration'),VariableDeclaration:require('./VariableDeclaration'),VariableDeclarationStatement:require('./VariableDeclarationStatement'),WhileStatement:require('./WhileStatement')};"
`;
